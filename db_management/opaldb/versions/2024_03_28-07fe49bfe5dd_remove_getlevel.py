"""remove_getlevel

Revision ID: 07fe49bfe5dd
Revises: bc09885fdeec
Create Date: 2024-03-28 01:27:23.883537

"""
from alembic import op
import sqlalchemy as sa

from db_management.opaldb.custom_operations import ReplaceableObject


# revision identifiers, used by Alembic.
revision = '07fe49bfe5dd'
down_revision = 'bc09885fdeec'
branch_labels = None
depends_on = None


def upgrade() -> None:
    op.drop_procedure(ReplaceableObject('getLevel'))

def downgrade() -> None:
    op.create_procedure(ReplaceableObject(
        'getLevel',
        "(`in_DateTime` DATETIME,\n	`in_Description` VARCHAR(255),\n	`in_HospitalMap` INT\n) RETURNS int(11)\n    DETERMINISTIC\n    COMMENT 'Get the RC or S1 level for the patient appointments'\nBEGIN\n/*\nBy: Yick Mo\nDate: 2018-06-04\n\nPurpose: This will override the original location of the appointment by figuring out the time of the appointment and where the level where the patient should go depends on what floor the doctor is located during the day.\n	The morning shift is AM until 13:00 which is considered PM.\n\n	NOTE: This is temporary for now due to the fact of the hard coding of the database and hospital maps. Need to design this to be more dynamic.\nParameters:\n	in_DateTime = date and time of the appointment\n\n	in_Description = description of the appointment\n		NOTE:\n			OpalDB is AliasExpression table (Description is the fieldname)\n			Wait Room Management is Clinic Resources table (ResourceName is the fieldname)\n\n	in_HospitalMap = original location where the patient is suppose to go for their appointment\n\nUpdate: 2021-09-21 YM\n	Removed the connection to ORMS database because we are now using APIs\n*/\n\n	-- Declare variables\n	Declare wsDateTime DateTime;\n	Declare wsDescription, wsCurrentHospitalMap, wsRCLevel, wsDSLevel VarChar(255);\n	Declare wsDayOfWeek, wsBloodTest, wsDS_Area VarChar(3);\n	Declare wsAMFM, wsReturnLevel VarChar(3);\n	Declare wsReturnHospitalMap Int;\n	-- Store the parameters\n	set wsDateTime = in_DateTime;\n	set wsDescription = in_Description;\n	set wsCurrentHospitalMap = concat('|', IfNull(in_HospitalMap, ''), '|');\n\n	-- Setup the default map location for RC and DS\n	set wsRCLevel = '|20|21|22|23|24|25|'; -- RC Level\n	set wsDSLevel = '|10|19|26|'; -- DS Level\n\n	-- Get the three characters of the day\n	set wsDayOfWeek = left(DAYNAME(ADDDATE(wsDateTime, INTERVAL 0 DAY)), 3);\n\n	-- Get the AM or PM\n	set wsAMFM = if(hour(ADDTIME(wsDateTime, '0 0:00:00')) >= 13, 'PM', 'AM');\n\n	-- Set the variables to default\n	set wsBloodTest = 'No';\n	set wsDS_Area = 'No';\n\n	-- Step 1) Is the appointment a blood test\n	set wsBloodTest = if(ltrim(rtrim(wsDescription)) = 'NS - prise de sang/blood tests pre/post tx', 'Yes', 'No');\n\n	-- Step 2) If not a blood test, then is the appointment description for DS location only\n	if (wsBloodTest = 'No') then\n		if (wsDescription like '.EBC%'\n			or wsDescription like '.EBP%'\n			or wsDescription like '.EBM%'\n			or wsDescription like 'CT%'\n			or wsDescription like '.BXC%'\n			or wsDescription like 'FOLLOW%'\n			or wsDescription like 'F-U%'\n			or wsDescription like 'CONSULT%'\n			or wsDescription like 'Injection%'\n			or wsDescription like 'Transfusion%'\n			or wsDescription like 'Nursing Consult%'\n			or wsDescription like 'INTRA%'\n			or wsDescription like 'Hydration%') then\n				if (\n					(wsDescription <> 'CONSULT RETURN TELEMED') AND\n					(wsDescription <> 'CONSULT NEW TELEMED') AND\n					(wsDescription <> 'FOLLOW UP TELEMED LESS/30 DAYS') AND\n					(wsDescription <> 'FOLLOW UP TELEMED MORE/30 DAYS') AND\n					(wsDescription <> 'FU TELEMED LESS/30DAYS') AND\n					(wsDescription <> 'FU TELEMED MORE/30DAYS') AND\n					(wsDescription <> 'INTRA TREAT TELEMED')\n					)then\n					set wsDS_Area = 'Yes';\n				else\n					set wsDS_Area = 'No';\n				end if;\n		else\n			set wsDS_Area = 'No';\n		end if;\n	end if;\n\n	-- Step 3) If it is not a blood test and DS location only, then get the current location of the doctor\n	if ((wsBloodTest = 'No') and (wsDS_Area = 'No')) then\n\n		-- Return only the RC or DS location of the doctor\n		-- Doctors may be assigned to two different rooms\n		/*\n		set wsReturnLevel =\n			(SELECT Level\n				FROM WaitRoomManagementFED.DoctorSchedule USE INDEX (ID_ResourceNameDayAMPM)\n				WHERE ResourceName = wsDescription\n					AND DAY = wsDayOfWeek\n					AND AMPM = wsAMFM\n				limit 1);\n		*/\n		-- If no location found, return N/A\n		set wsReturnLevel = (IfNull(wsReturnLevel, 'N/A'));\n	end if;\n\n\n	-- Step 4) Return the location\n	set wsReturnHospitalMap = -1;\n\n	if ((wsBloodTest = 'Yes') and (wsDS_Area = 'No')) then\n		set wsReturnHospitalMap = 23; -- Return RC level for blood test\n	else\n		if ((wsBloodTest = 'No') and (wsDS_Area = 'Yes')) then\n			set wsReturnHospitalMap = 19; -- Return DS Level for only DS location based on the appointment description\n		else\n\n			if ( 	((wsReturnLevel = 'S1') and (instr(wsDSLevel, wsCurrentHospitalMap) > 0))  or\n					((wsReturnLevel = 'RC')  and (instr(wsRCLevel, wsCurrentHospitalMap) > 0)) or\n					((wsReturnLevel = 'N/A') and (wsCurrentHospitalMap <> '||')) ) then\n				set wsReturnHospitalMap = in_HospitalMap; -- If doctor's and appointment location match or if the doctor's location is N/A, then return original location.\n			else\n				-- If doctor's and appointment location does not match\n				if (wsReturnLevel = 'S1') then\n					set wsReturnHospitalMap = 19; -- Return DS level\n				else\n					if (wsReturnLevel = 'RC') then\n						set wsReturnHospitalMap = 20; --  Return RC level\n					end if;\n				end if;\n			end if;\n\n		end if;\n	end if;\n\n	if (wsReturnHospitalMap = -1) then\n		set wsReturnHospitalMap = 20; -- Force default for all appointment when unable to locate one\n	end if;\n\n 	Return wsReturnHospitalMap;\n\nEND;",
    ))
