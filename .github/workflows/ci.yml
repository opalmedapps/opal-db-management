# SPDX-FileCopyrightText: Copyright (C) 2025 Opal Health Informatics Group at the Research Institute of the McGill University Health Centre <john.kildea@mcgill.ca>
#
# SPDX-License-Identifier: AGPL-3.0-or-later
name: ci

on:
  push:
    branches:
      - main
  pull_request:
  workflow_dispatch:
  merge_group:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.ref == 'refs/heads/main' }}

permissions:
  contents: read

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4.2.2
        with:
          persist-credentials: false
      - uses: astral-sh/setup-uv@v5.3.1
        id: setup-uv
        with:
          # renovate: datasource=pypi dependency=uv
          version: "0.6.4"
          cache-dependency-glob: "requirements/*.txt"
      - name: Install Python
        run: |
          uv python install
          echo "Installed uv version is $(uv --version)"
          echo "Installed Python version is $(python --version)"
      - run: |
          uv venv
          uv pip install -r requirements/development.txt
      - run: |
          source .venv/bin/activate
          uv run mypy --version
          which mypy
          which uv
          which pre-commit
        if: '!cancelled()'
      - name: Run ruff check
        # run all steps to get all linting errors at once, fail at the end if any steps failed
        if: '!cancelled()'
        run: uv run ruff check --output-format github
      - name: Run ruff format
        if: '!cancelled()'
        env:
          RUFF_OUTPUT_FORMAT: github
        run: uv run ruff format --check
      - uses: mschoettle/pre-commit-action@v4.1.0
        if: '!cancelled()'
        env:
          SKIP: ruff,ruff-format,markdownlint-cli2
      - name: Run pytest
        if: '!cancelled()'
        run: |
          uv run pytest --version
          uv run pytest
      - name: Fail if any previous steps failed
        if: failure()
        run: exit 1


  markdownlint:
    permissions:
      contents: read
      # required for upload-sarif action
      # https://docs.github.com/en/code-security/code-scanning/integrating-with-code-scanning/uploading-a-sarif-file-to-github#example-workflow-for-sarif-files-generated-outside-of-a-repository
      security-events: write
    uses: opalmedapps/.github/.github/workflows/markdownlint.yaml@main
