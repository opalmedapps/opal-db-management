# SPDX-FileCopyrightText: Copyright (C) 2025 Opal Health Informatics Group at the Research Institute of the McGill University Health Centre <john.kildea@mcgill.ca>
#
# SPDX-License-Identifier: AGPL-3.0-or-later
name: ci

on:
  push:
    branches:
      - main
  pull_request:
  workflow_dispatch:
  merge_group:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.ref == 'refs/heads/main' }}

permissions:
  contents: read

env:
  DB_ROOT_PASSWORD: "root-password"
  DB_PASSWORD: "user-password"
  DB_USER: citest

jobs:
  lint:
    runs-on: ubuntu-latest
    env:
      RUFF_OUTPUT_FORMAT: github
    steps:
      - uses: actions/checkout@v4.2.2
        with:
          persist-credentials: false
      - uses: astral-sh/setup-uv@v5.3.1
        id: setup-uv
        with:
          # renovate: datasource=pypi dependency=uv
          version: "0.6.4"
          cache-dependency-glob: "requirements/*.txt"
      - name: Install Python
        run: |
          uv python install
          echo "Installed uv version is $(uv --version)"
          echo "Installed Python version is $(python --version)"
      - run: |
          uv venv
          uv pip install -r requirements/development.txt
      - name: Run ruff check
        # run all steps to get all linting errors at once, fail at the end if any steps failed
        if: '!cancelled()'
        run: uv run ruff check
      - name: Run ruff format
        if: '!cancelled()'
        run: |
          # register the problem matcher
          # https://github.com/astral-sh/ruff/issues/10430
          # https://github.com/astral-sh/ruff-action/pull/26
          echo "::add-matcher::.github/workflows/matchers/ruff.json"
          uv run ruff format --check
      - uses: mschoettle/pre-commit-action@v4.1.2
        if: '!cancelled()'
        env:
          SKIP: ruff,ruff-format,markdownlint-cli2
      - name: Fail if any previous steps failed
        if: failure()
        run: exit 1

  test:
    runs-on: ubuntu-latest
    container: python:3.12.8-alpine3.20
    services:
      db:
        image: mariadb:10.11.10-jammy
        env:
          MARIADB_ROOT_PASSWORD: $DB_ROOT_PASSWORD
          # ensure that user has permissions for test DB to be used by pytest
          MARIADB_DATABASE: OpalDB
          MARIADB_USER: $DB_USER
          MARIADB_PASSWORD: $DB_PASSWORD

    steps:
      - uses: actions/checkout@v4.2.2
        with:
          persist-credentials: false
      - name: Install dependencies
        run: |
          pip install uv
          echo "Installed uv version is $(uv --version)"
          # install dependencies for mysqlclient
          apk add --no-cache build-base mariadb-dev mariadb-client
          uv pip install --system -r requirements/development.txt
      - name: Prepare environment
        # set up env file for DB service
        # use sample env file
        run: |
          cp .env.sample .env
          sed -i "s/^DATABASE_ROOT_PASSWORD=.*/DATABASE_ROOT_PASSWORD=$DB_ROOT_PASSWORD/" .env
          sed -i "s/^DATABASE_USER=.*/DATABASE_USER=$DB_USER/" .env
          sed -i "s/^DATABASE_PASSWORD=.*/DATABASE_PASSWORD=$DB_PASSWORD/" .env
          sed -i "s/^DATABASE_HOST=.*/DATABASE_HOST=db/" .env
          cat .env
          # create additional DBs for legacy DB tests (OpalDB & QuestionnaireDB)
          MYSQL_PWD=$DB_ROOT_PASSWORD mysql -u root -h db -e "CREATE DATABASE IF NOT EXISTS \`QuestionnaireDB\` /*!40100 DEFAULT CHARACTER SET utf8 */; GRANT ALL PRIVILEGES ON \`QuestionnaireDB\`.* TO \`$MARIADB_USER\`@\`%\`;"
          MYSQL_PWD=$DB_ROOT_PASSWORD mysql -u root -h db -e "CREATE DATABASE IF NOT EXISTS \`OrmsDatabase\` /*!40100 DEFAULT CHARACTER SET latin1 */; GRANT ALL PRIVILEGES ON \`OrmsDatabase\`.* TO \`$MARIADB_USER\`@\`%\`;"
          MYSQL_PWD=$DB_ROOT_PASSWORD mysql -u root -h db -e "CREATE DATABASE IF NOT EXISTS \`OrmsLog\` /*!40100 DEFAULT CHARACTER SET latin1 */; GRANT ALL PRIVILEGES ON \`OrmsLog\`.* TO \`$MARIADB_USER\`@\`%\`;"


  markdownlint:
    permissions:
      contents: read
      # required for upload-sarif action
      # https://docs.github.com/en/code-security/code-scanning/integrating-with-code-scanning/uploading-a-sarif-file-to-github#example-workflow-for-sarif-files-generated-outside-of-a-repository
      security-events: write
    uses: opalmedapps/.github/.github/workflows/markdownlint.yaml@main
