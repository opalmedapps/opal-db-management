CREATE PROCEDURE `proc_CleanPatientDeviceIdentifier`()
BEGIN
/****************************************************************************************************
Purpose: This stored procedure is to remove records from the table PatientDeviceIdentifier with
the following condition. 
1. Any device type = 3 will be deleted. Device type 3 are generated by the browsers
2. Any registration ID that is empty
3. Any test accounts that are over a specified date

Reason: 
1. Remove useless records that is not in use. Especially caused by testing.
2. People change cell phones
3. Updating the app changles the device ID
4. Some tester are actually real patient
****************************************************************************************************/

/****************************************************************************************************
Remove any device type 3 or empty registration ID
****************************************************************************************************/
delete from PatientDeviceIdentifier
where DeviceType = 3
	or isnull(RegistrationId)
	or trim(RegistrationId) = ''
;

/****************************************************************************************************
Remove old push notification that were sent to test accounts
****************************************************************************************************/
delete from PushNotification 
where PatientDeviceIdentifierSerNum in 
	(Select PatientDeviceIdentifierSerNum from PatientDeviceIdentifier
	where LastUpdated <= DATE_SUB(curdate(), INTERVAL 14 DAY)
	and PatientSerNum in 
		(select PatientSerNum from Patient
		where PatientID in ('9999996', '3333', 'AAAA1', '1092300', '5324122', 'Opal6', 'Opal1',
			'Opal2', 'Opal5', 'Opal4', 'Opal3', 'QA_0630', 'QA_ DAW_APP_HEAD',
			'Opal4temp', '9999993', '9999997', 'OpalDemo1', '9999995', '9999992', '9999991'
			)
		)
	)
;

/****************************************************************************************************
Remove any records that are older than specified date
****************************************************************************************************/
delete from PatientDeviceIdentifier
where LastUpdated <= DATE_SUB(curdate(), INTERVAL 14 DAY)
	and PatientSerNum in 
	(select PatientSerNum from Patient
	where PatientID in ('9999996', '3333', 'AAAA1', '1092300', '5324122', 'Opal6', 'Opal1',
		'Opal2', 'Opal5', 'Opal4', 'Opal3', 'QA_0630', 'QA_ DAW_APP_HEAD',
		'Opal4temp', '9999993', '9999997', 'OpalDemo1', '9999995', '9999992', '9999991'
		)
	)
;

END;

CREATE PROCEDURE `reg_BranchSearch`(
	IN `in_Branch` VARCHAR(515)
)
BEGIN

	declare wsBranchID varchar(515);
	declare wsReturn varchar(50);
	declare wsRAMQ varchar(50);
	declare wsRegistrationCode varchar(50);
	declare wsPatientSerNum bigint;
	declare wsStatus varchar(50);

	set wsBranchID = in_Branch;
	set @wsRAMQ = null;
	set @wsPatientSerNum = null;
	set @wsRegistrationCode = null;
	set @wsStatus = null;
	
	if wsBranchID is not null then		
		
		prepare stmt from 
		'Select R.PatientSerNum, R.RegistrationCode, R.`Status`
		into @wsPatientSerNum, @wsRegistrationCode, @wsStatus
		from registerdb.registrationcode R
		where R.FirebaseBranch = ?'
		;

		set @A = wsBranchID;
		
		EXECUTE stmt USING @A;
		DEALLOCATE PREPARE stmt;
		
		if @wsRegistrationCode is not null then
			
			prepare stmt2 from
			'Select P.SSN
			into @wsRAMQ
			from OpalDB.Patient P
			where P.PatientSerNum = ?'
			;
			
			
			set @A = @wsPatientSerNum;
			EXECUTE stmt2 USING @A;
			DEALLOCATE PREPARE stmt2;
			
			if @wsRAMQ is NULL then
				set @wsStatus = 'UNKNOWN CODE';
			end if;
			
		else

			set @wsStatus = 'UNKNOWN BRANCH';
		end if;
		
	else
	
		set @wsStatus = 'MISSING INFO';
		
	end if;
	
	Select @wsRegistrationCode as RegistrationCode, @wsRAMQ as RAMQ, @wsStatus as Status;

END;

CREATE PROCEDURE `reg_getAccessLevelList`(
	IN `i_RAMQ` VARCHAR(20)
)
    COMMENT 'Procedure to get accesslevel data.'
BEGIN
Declare wsRAMQ VarChar(50);
Declare wsValid int;

-- Store the parameters
set wsRAMQ  = IfNull(i_RAMQ, 'Error');

set wsValid = (SELECT count(*) from Patient where SSN = wsRAMQ);

if (wsValid > 0) then
Select Id, AccessLevelName_EN, AccessLevelName_FR from accesslevel order by Id;
else 
Select 0 AS Error;
end if;
END;

CREATE PROCEDURE `reg_getLanguageList`(
	IN `i_RAMQ` VARCHAR(20)
)
BEGIN
Declare wsRAMQ VarChar(50);
Declare wsValid int;

-- Store the parameters
set wsRAMQ  = IfNull(i_RAMQ, 'Error');

set wsValid = (SELECT count(*) from Patient where SSN = wsRAMQ);

if (wsValid > 0) then
Select Id,Prefix, LanguageName_EN, LanguageName_FR from language order by Id;
else 
Select 0 AS Error;
end if;
END;

CREATE PROCEDURE `reg_getSecurityQuestions`(
	IN `i_RAMQ` VARCHAR(20)
)
BEGIN
Declare wsRAMQ VarChar(50);
Declare wsValid int;

-- Store the parameters
set wsRAMQ  = IfNull(i_RAMQ, 'Error');

set wsValid = (SELECT count(*) from Patient where SSN = wsRAMQ);

if (wsValid > 0) then
Select SecurityQuestionSerNum, QuestionText_EN, QuestionText_FR from SecurityQuestion where Active = 1 order by SecurityQuestionSerNum;
else 
Select 0 AS Error;
end if;
END;

CREATE PROCEDURE `reg_getTermsandAggrementDocuments`(
	IN `i_RAMQ` VARCHAR(20)
)
BEGIN
Declare wsRAMQ VarChar(50);
Declare wsValid int;

-- Store the parameters
set wsRAMQ  = IfNull(i_RAMQ, 'Error');

set wsValid = (SELECT count(*) from Patient where SSN = wsRAMQ);

if (wsValid > 0) then
Select Id,DocumentLink_EN, DocumentLink_FR, PDFLink_EN, PDFLink_FR from termsandagreement where Active = 1 order by Id;
else 
Select 0 AS Error;
end if;
END;

CREATE PROCEDURE `reg_getUserName`(
	IN `i_RAMQ` VARCHAR(20)
)
BEGIN
Declare wsRAMQ VarChar(50);
Declare wsValid int;

-- Store the parameters
set wsRAMQ  = IfNull(i_RAMQ, 'Error');

set wsValid = (SELECT count(*) from Patient where SSN = wsRAMQ);

if (wsValid > 0) then
Select FirstName,LastName from Patient as result where SSN = wsRAMQ;
else 
Select 0 AS Error;
end if;
END;

CREATE PROCEDURE `getQuestionnaireResults`(
	IN `in_QuestionnaireSerNum` INT
)
Generate_Report : BEGIN
	
	-- Declare variables
	Declare wsQuestionnaireSerNum Int;

	set wsQuestionnaireSerNum = ifnull(in_QuestionnaireSerNum, 0);

	if (wsQuestionnaireSerNum = 0) then
		select "Missing parameter: Please enter the QuestionnaireSerNum";
		leave Generate_Report;
	end if;

	select PQ.PatientQuestionnaireSerNum,
		PQ.DateTimeAnswered,
		QT.QuestionType,
		A.Answer,
		Q2.QuestionQuestion, 
		Q2.QuestionQuestion_FR	
	from 	QuestionnaireDB.PatientQuestionnaire PQ, QuestionnaireDB.Answer A, QuestionnaireDB.Questionnaire Q1, QuestionnaireDB.QuestionnaireQuestion QQ, 
			QuestionnaireDB.Question Q2, QuestionnaireDB.Source S, QuestionnaireDB.QuestionType QT, QuestionnaireDB.Patient P
	where PQ.PatientQuestionnaireSerNum = A.PatientQuestionnaireSerNum
		and A.QuestionnaireQuestionSerNum = QQ.QuestionnaireQuestionSerNum
		and Q1.QuestionnaireSerNum = QQ.QuestionnaireSerNum
		and QQ.QuestionSerNum = Q2.QuestionSerNum
		and Q2.SourceSerNum = S.SourceSerNum
		and Q2.QuestionTypeSerNum = QT.QuestionTypeSerNum
		and PQ.PatientSerNum = P.PatientSerNum
		and PQ.PatientQuestionnaireSerNum in 
				(select Q.PatientQuestionnaireDBSerNum from OpalDB.Questionnaire Q 
					where DateAdded > '2018-11-23' and CompletedFlag = 1 
						and PatientSerNum Not In (51, 92, 197, 198, 204, 200, 199, 124, 229)
						)
		and Q1.QuestionnaireSerNum = wsQuestionnaireSerNum
		and DATE_FORMAT(PQ.DateTimeAnswered, "%Y-%m-%d") >= '2018-11-23'
	order by PQ.PatientQuestionnaireSerNum, PQ.PatientSerNum, QQ.OrderNum asc;

	Select if(CompletedFlag = 0, 'No', 'Yes') Completed_Flag, count(*) 
	from OpalDB.Questionnaire 
		where QuestionnaireControlSerNum = wsQuestionnaireSerNum
	group by CompletedFlag;
	
	Select if(ReadStatus = 0, 'No', 'Yes') Read_Status, count(*) from Notification 
	where RefTableRowSerNum in 
		(select QuestionnaireSerNum 
			from Questionnaire 
			where QuestionnaireControlSerNum = wsQuestionnaireSerNum)
		and NotificationControlSerNum = 13
	group by ReadStatus;

END;
